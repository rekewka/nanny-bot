from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CommandHandler, ConversationHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from data.database import get_nanny, add_booking, update_booking_status
import datetime

BOOKING_DATE, BOOKING_TIME, BOOKING_DURATION, BOOKING_PET_DETAILS, BOOKING_ADDRESS, BOOKING_CONFIRM = range(6)

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
 
    query = update.callback_query
    await query.answer()
    
    nanny_id = int(query.data.split('_')[1])
    nanny = get_nanny(nanny_id)
    
    if not nanny:
        await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—è–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
   
    context.user_data['booking_nanny_name'] = nanny['name']
    
 
    await query.edit_message_text(
        f"–í—ã –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ {nanny['name']} –∏–∑ {nanny['city']}.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025):"
    )
    return BOOKING_DATE

async def booking_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_text = update.message.text
    try:
        booking_date = datetime.datetime.strptime(date_text, "%d.%m.%Y").date()
        
      
        if booking_date < datetime.datetime.now().date():
            await update.message.reply_text(
                "–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:"
            )
            return BOOKING_DATE
        
       
        context.user_data['booking_date'] = booking_date
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 14:30):"
        )
        return BOOKING_TIME
        
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025):"
        )
        return BOOKING_DATE

async def booking_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_text = update.message.text
    try:
        time_obj = datetime.datetime.strptime(time_text, "%H:%M").time()
        booking_date = context.user_data['booking_date']
        start_datetime = datetime.datetime.combine(booking_date, time_obj)
        if start_datetime < datetime.datetime.now():
            await update.message.reply_text(
                "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è:"
            )
            return BOOKING_TIME
    
        context.user_data['booking_start_time'] = start_datetime
        
        keyboard = [
            ['1 —á–∞—Å', '2 —á–∞—Å–∞', '3 —á–∞—Å–∞'],
            ['4 —á–∞—Å–∞', '6 —á–∞—Å–æ–≤', '8 —á–∞—Å–æ–≤'],
            ['–î—Ä—É–≥–æ–µ']
        ]
       
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        )
        return BOOKING_DURATION
      
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
        )
        return BOOKING_TIME
        
async def booking_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    duration_text = update.message.text
    
 
    if duration_text == '–î—Ä—É–≥–æ–µ':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):",
            reply_markup=ReplyKeyboardRemove()
        )
        return BOOKING_DURATION
    
    
    try:
        if '—á–∞—Å' in duration_text:
            hours = int(duration_text.split()[0])
        else:
            hours = int(duration_text)
        
        if hours <= 0 or hours > 24:
            await update.message.reply_text(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return BOOKING_DURATION
        
        
        start_time = context.user_data['booking_start_time']
        end_time = start_time + datetime.timedelta(hours=hours)
        
      
        context.user_data['booking_end_time'] = end_time
        context.user_data['booking_duration'] = hours
        
       
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–≤–∏–¥, –ø–æ—Ä–æ–¥–∞, –≤–æ–∑—Ä–∞—Å—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏):",
            reply_markup=ReplyKeyboardRemove()
        )
        return BOOKING_PET_DETAILS
        
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤."
        )
        return BOOKING_DURATION

async def booking_pet_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
   
    pet_details = update.message.text
    
   
    if len(pet_details) < 5:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:"
        )
        return BOOKING_PET_DETAILS
    
 
    context.user_data['booking_pet_details'] = pet_details
    
   
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –Ω—è–Ω—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–±—ã—Ç—å:"
    )
    return BOOKING_ADDRESS

async def booking_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    address = update.message.text
    
  
    if len(address) < 5:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:"
        )
        return BOOKING_ADDRESS
    
  
    context.user_data['booking_address'] = address
    
 
    nanny_name = context.user_data['booking_nanny_name']
    start_time = context.user_data['booking_start_time'].strftime("%d.%m.%Y %H:%M")
    end_time = context.user_data['booking_end_time'].strftime("%d.%m.%Y %H:%M")
    duration = context.user_data['booking_duration']
    pet_details = context.user_data['booking_pet_details']
    
    
    nanny_id = context.user_data['booking_nanny_id']
    nanny = get_nanny(nanny_id)
    hourly_rate = nanny['hourly_rate']
    total_cost = hourly_rate * duration
    
    summary = (
        f"üìã –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üë§ –ù—è–Ω—è: {nanny_name}\n"
        f"üïí –ù–∞—á–∞–ª–æ: {start_time}\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á–∞—Å–æ–≤\n"
        f"üïí –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}\n"
        f"üêæ –ü–∏—Ç–æ–º–µ—Ü: {pet_details}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} ‚Ç∏ ({hourly_rate} ‚Ç∏/—á–∞—Å √ó {duration} —á)\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
    )
    
   
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="booking_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="booking_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, reply_markup=reply_markup)
    return BOOKING_CONFIRM

async def booking_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "booking_confirm":
   
        owner_id = update.effective_user.id
        nanny_id = context.user_data['booking_nanny_id']
        start_time = context.user_data['booking_start_time']
        end_time = context.user_data['booking_end_time']
        pet_details = context.user_data['booking_pet_details']
        address = context.user_data['booking_address']
        
        booking_id = add_booking(owner_id, nanny_id, start_time, end_time, pet_details, address)
        
        await query.edit_message_text(
            f"üéâ –ó–∞–∫–∞–∑ #{booking_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            "–ù—è–Ω—è –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ /my_bookings."
        )
    else:
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω."
        )
    
   
    for key in list(context.user_data.keys()):
        if key.startswith('booking_'):
            del context.user_data[key]
    
    return ConversationHandler.END

async def booking_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await update.message.reply_text(
        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    
   
    for key in list(context.user_data.keys()):
        if key.startswith('booking_'):
            del context.user_data[key]
    
    return ConversationHandler.END


booking_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_booking, pattern=r'^book_\d+$')],
    states={
        BOOKING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_date)],
        BOOKING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_time)],
        BOOKING_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_duration)],
        BOOKING_PET_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_pet_details)],
        BOOKING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_address)],
        BOOKING_CONFIRM: [CallbackQueryHandler(booking_confirm, pattern=r'^booking_\w+$')]
    },
    fallbacks=[CommandHandler('cancel', booking_cancel)]
)