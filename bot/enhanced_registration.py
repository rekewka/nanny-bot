import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CommandHandler, ConversationHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

from bot.conversation import (
    BECOME_NANNY_NAME, BECOME_NANNY_CITY, BECOME_NANNY_EXP,
    BECOME_NANNY_PETS, BECOME_NANNY_RATE, BECOME_NANNY_DESC,
    BECOME_NANNY_PASSWORD, registration_cancel
)

# Enhanced nanny registration
async def enhanced_nanny_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    from data.database import get_nanny, add_user

    if get_nanny(user_id):
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω—è–Ω—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myinfo –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.")
        return ConversationHandler.END

    user_username = user.username or f"user_{user_id}"
    add_user(user_id, user_username)
    context.user_data["nanny_info"] = {"username": user_username}

    registration_text = (
        "üêæ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–Ø–ù–ò üêæ\n"
        "---------------------\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω—è–Ω—å –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤!\n\n"
        "–®–∞–≥ 1 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞–º:"
    )

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="cancel_registration")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(registration_text, reply_markup=reply_markup)
    return BECOME_NANNY_NAME


async def cancel_registration_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é /become_nanny")
    return ConversationHandler.END

async def enhanced_nanny_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nanny_info"] = context.user_data.get("user_info", {})
    context.user_data["nanny_info"]["name"] = update.message.text.strip()

    await update.message.reply_text(
        "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–®–∞–≥ 2 –∏–∑ 7: –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —É—Å–ª—É–≥–∏? üèôÔ∏è"
    )
    return BECOME_NANNY_CITY

async def enhanced_nanny_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nanny_info"]["city"] = update.message.text.strip()
    await update.message.reply_text(
        "‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–®–∞–≥ 3 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏ (–≤ –≥–æ–¥–∞—Ö) üìä\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2"
    )
    return BECOME_NANNY_EXP

async def enhanced_nanny_exp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    experience = update.message.text.strip()
    if not experience.isdigit():
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–æ–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö).\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2"
        )
        return BECOME_NANNY_EXP

    context.user_data["nanny_info"]["experience"] = int(experience)

    keyboard = [
        ["üê∂ –°–æ–±–∞–∫–∏", "üê± –ö–æ—à–∫–∏"],
        ["üê¶ –ü—Ç–∏—Ü—ã", "üêπ –ì—Ä—ã–∑—É–Ω—ã"],
        ["üê† –†—ã–±–∫–∏", "ü¶é –†–µ–ø—Ç–∏–ª–∏–∏"],
        ["üåü –í—Å–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤"],
    ]
    await update.message.reply_text(
        "‚úÖ –û–ø—ã—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–®–∞–≥ 4 –∏–∑ 7: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ üêæ",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return BECOME_NANNY_PETS

async def enhanced_nanny_pets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pet_choice = update.message.text
    if "–í—Å–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤" in pet_choice:
        pet_types = ["–°–æ–±–∞–∫–∏", "–ö–æ—à–∫–∏", "–ü—Ç–∏—Ü—ã", "–ì—Ä—ã–∑—É–Ω—ã", "–†—ã–±–∫–∏", "–†–µ–ø—Ç–∏–ª–∏–∏"]
    else:
        pet_types = [re.sub(r"[^\w\s]", "", pet_choice).strip()]

    context.user_data["nanny_info"]["pet_types"] = pet_types

    rate_keyboard = [
        ["1000 ‚Ç∏", "1500 ‚Ç∏", "2000 ‚Ç∏"],
        ["2500 ‚Ç∏", "3000 ‚Ç∏", "4000 ‚Ç∏"],
        ["5000 ‚Ç∏", "–î—Ä—É–≥–∞—è —Å—É–º–º–∞"]
    ]
    await update.message.reply_text(
        "‚úÖ –¢–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–®–∞–≥ 5 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ —Ç–µ–Ω–≥–µ üí∞\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Å—É–º–º—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é:",
        reply_markup=ReplyKeyboardMarkup(rate_keyboard, one_time_keyboard=True)
    )
    return BECOME_NANNY_RATE

async def enhanced_nanny_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate_text = update.message.text.strip()
    rate = rate_text.split(" ")[0] if "‚Ç∏" in rate_text else rate_text

    if rate == "–î—Ä—É–≥–∞—è —Å—É–º–º–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
        return BECOME_NANNY_RATE

    if not rate.isdigit():
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2000", reply_markup=ReplyKeyboardRemove())
        return BECOME_NANNY_RATE

    context.user_data["nanny_info"]["hourly_rate"] = int(rate)

    examples = [
        "–û–ø—ã—Ç–Ω—ã–π –∫–∏–Ω–æ–ª–æ–≥, —É–º–µ—é –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å —Å–æ–±–∞–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–¥. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —É—Å–ª—É–≥–∏ –≤—ã–≥—É–ª–∞ –∏ –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∏.",
        "–õ—é–±–ª—é –∫–æ—à–µ–∫ –≤—Å–µ—Ö –ø–æ—Ä–æ–¥, –∏–º–µ—é –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–µ. –ú–æ–≥—É –¥–∞–≤–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º.",
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–æ–æ–ª–æ–≥ —Å –≤—ã—Å—à–∏–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –±–æ–ª–µ–µ 5 –ª–µ—Ç."
    ]
    await update.message.reply_text(
        "‚úÖ –°—Ç–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–®–∞–≥ 6 –∏–∑ 7: –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏ —É—Å–ª—É–≥–∏ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) üìù\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:\n‚Ä¢ {examples[0]}\n‚Ä¢ {examples[1]}\n‚Ä¢ {examples[2]}",
        reply_markup=ReplyKeyboardRemove()
    )
    return BECOME_NANNY_DESC

async def enhanced_nanny_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text.strip()
    if len(description) > 200:
        await update.message.reply_text("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return BECOME_NANNY_DESC

    context.user_data["nanny_info"]["description"] = description
    await update.message.reply_text(
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–®–∞–≥ 7 –∏–∑ 7: –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É üîê\n(–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)"
    )
    return BECOME_NANNY_PASSWORD

async def enhanced_nanny_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text
    if len(password) < 4:
        await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return BECOME_NANNY_PASSWORD

    context.user_data["nanny_info"]["password"] = password
    user_id = update.effective_user.id

    from data.database import add_nanny, update_user_type
    add_nanny(user_id, context.user_data["nanny_info"])
    update_user_type(user_id, "nanny")

    success_message = (
        "üéä –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! üéä\n"
        "---------------------\n\n"
        "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω—è–Ω–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        "–ß—Ç–æ –¥–∞–ª—å—à–µ:\n"
        "‚Ä¢ /myinfo ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ /login ‚Äî –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n"
        "‚Ä¢ /my_bookings ‚Äî –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n"
        "–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üåü"
    )
    await update.message.reply_text(success_message)
    return ConversationHandler.END


enhanced_nanny_registration_conv = ConversationHandler(
    entry_points=[CommandHandler("become_nanny", enhanced_nanny_registration)],
    states={
        BECOME_NANNY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_nanny_name)],
        BECOME_NANNY_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_nanny_city)],
        BECOME_NANNY_EXP: [MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_nanny_exp)],
        BECOME_NANNY_PETS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_nanny_pets)],
        BECOME_NANNY_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_nanny_rate)],
        BECOME_NANNY_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_nanny_desc)],
        BECOME_NANNY_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_nanny_password)],
    },
    fallbacks=[
        CommandHandler("cancel", registration_cancel),
        CallbackQueryHandler(cancel_registration_callback, pattern="^cancel_registration$")
    ],
    name="enhanced_nanny_registration_conv",
    persistent=False,
)
